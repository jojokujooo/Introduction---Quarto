{
  "hash": "069c90b2dacd8f2b1d1552946ce8c39d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Commentaires et Affichage\n---\n\n### Commentaires\n\n<p id=textIntro>Les <strong>commentaires</strong> sont utilisés pour expliquer le code. Ils sont utiles pour vous mais surtout pour ceux qui vont lire votre code. Ils commencent par un <strong>#</strong> et prennent toute une ligne sauf s'ils suivent une instruction. <strong>A noter qu'ils ne sont pas comptabilisés quand on exécute du code</strong><br>\n<strong>Alors simplifiez la vie de votre prof et commentez votre code !</strong></p>\n\n::: {#fa9290b0 .cell execution_count=1}\n``` {.python .cell-code}\n# Voici un commentaire\n\nvariableTest = 2 # Voici un commentaire qui suit une ligne de code\n```\n:::\n\n\n### Affichage\n<p id=textIntro>En Python, pour afficher du texte, le contenu d'une variable ou même les deux, on utilise la fonction <strong>print().</strong>  </p>\n\n::: {#ef2816ae .cell execution_count=2}\n``` {.python .cell-code}\nprint(\"Mes élèves sont les meilleurs\") # Affiche le texte entre les guillemets\nprint(variableTest) # Affiche la valeur de la variable\nprint(\"Mes élèves sont les meilleurs\", variableTest) # Affiche le texte entre les guillemets et la valeur de la variable\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMes élèves sont les meilleurs\n2\nMes élèves sont les meilleurs 2\n```\n:::\n:::\n\n\n### Formatage\n<p id=textIntro>Pour afficher du texte ainsi que des variables dans une même ligne il existe aussi une autre méthode que l'on appelle les <strong>f-strings</strong>. En utilisant les <strong>f-strings</strong>, vous pouvez insérer des variables directement dans une chaîne de caractères en plaçant leur nom <strong>entre des accolades {}</strong> à l'intérieur de la chaîne. Cela améliore grandement la lisibilité. Mais pour cela il faut placer un <strong>f</strong> DEVANT la chaîne de caractères. Voici un exemple :</p>\n\n::: {#a6a25540 .cell execution_count=3}\n``` {.python .cell-code}\nprenom = \"Johann\"\nage = \"22\"\nprint(f\"Je m'appelle {prenom} et j'ai {age} ans\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nJe m'appelle Johann et j'ai 22 ans\n```\n:::\n:::\n\n\n<p id=textIntro>L'utilisation de la méthode <strong>.format()</strong> en Python permet aussi d'insérer des variables dans des chaînes de caractères en spécifiant des <strong>emplacements réservés</strong> (placeholders) avec des accolades {} , puis en utilisant la méthode <strong>.format()</strong> après la chaine de caractères pour remplacer ces emplacements par les valeurs des variables.</p>\n\n::: {#392605ce .cell execution_count=4}\n``` {.python .cell-code}\n# Utilisation de format()\nprint(\"Bonjour, je m'appelle {} et j'ai {} ans.\".format(prenom, age))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBonjour, je m'appelle Johann et j'ai 22 ans.\n```\n:::\n:::\n\n\n### Calcul et arrondi\n<p id=textIntro> Dans votre vie de programmeur, vous effectuerez souvent des calculs. Mais leur résultat seront peut-être parfois trop précis, donc il faudra les arrondir ! Dans l'exemple suivant on va faire un calcul puis l'afficher une première fois sans l'arrondir puis un autre fois arrondi.</p>\n\n::: {#7ec1d6de .cell execution_count=5}\n``` {.python .cell-code}\n# Calcul\nresultat = 10 / 3\n\n# Affichage\nprint(f\"Le résultat pas arrondi est {resultat}\")\n\n# Arrondi à deux chiffres après la virgule\n\nprint(f\"Le résultat arrondi est : {resultat:.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLe résultat pas arrondi est 3.3333333333333335\nLe résultat arrondi est : 3.33\n```\n:::\n:::\n\n\n<p id=textIntro>Vous êtes maintenant un pro des commentaires et de l'affichage ! <a href=struct_controle.qmd>Cliquez-ici</a> pour passer à la suite.</p>\n\n",
    "supporting": [
      "comm_affiche_files"
    ],
    "filters": [],
    "includes": {}
  }
}