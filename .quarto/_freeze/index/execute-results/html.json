{
  "hash": "9f4fa936ecd1f9c8bfd0dbd84d6c4b2b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Les Fondamentaux de Python\"\n---\n\n<p id=textIntro>Bonjour ! Moi c'est <strong>Johann Cazenave</strong>, le remplaçant temporaire de votre prof de programmation <a href=\"https://www.linkedin.com/in/menyssacherifaluron/\">Ményssa Chérifa-Luron, Ph.D</a> car elle n'est pas encore rentrée de son voyage en Corée. Mais ce n'est pas pour autant que vous allez rater cette magnifique formation !</p>\n<p id=textIntro>Au programme ? Une révision des bases de Python car c'est souvent celles que l'on néglige le plus et qui sont finalement les bases de tout langage de programmation.</p>\n\n# Mais Johann, c'est quoi Python ?\n<p id=textIntro>Python, c'est un peu comme un <strong> super-héros</strong> de la programmation, né en 1989 dans l'esprit créatif de Guido van Rossum, un fan de la comédie absurde des Monty Python. C'est un langage de programmation qui a tout pour plaire : il est polyvalent, gratuit comme l'air que vous respirez, et tellement simple à utiliser que même votre grand-mère pourrait s'y mettre (peut-être même votre chat, qui sait ?). Avec Python, vous pouvez jongler avec des milliers de lignes de code sans jamais vous prendre les pieds dans le tapis, car il est conçu pour être aussi convivial qu'un panda câlin. Vous pouvez l'installer sur tous vos gadgets électroniques, du PC de papa à votre smartphone dernier cri, sans débourser un sou. Et le meilleur dans tout ça ? Pas besoin de vous tracasser avec des compilateurs compliqués : Python est un langage interprété, ce qui signifie que vous pouvez voir les résultats de votre travail en un clin d'œil, sans avoir à attendre des heures que votre code se transforme en quelque chose de tangible. Alors, mes petits génies en herbe, prêts à devenir les super-héros de la programmation avec Python ?</p>\n\n# Variables et opérations\n## Les variables\n<p id=textIntro>Concrètement, les variables sont juste des éléments qui peuvent contenir des données, même si c'est plus compliqué que ça si vous le retenez c'est déjà pas mal. Elles sont déclarées avec le <strong>nom de la variable</strong> suivi d'un =, puis de leurs valeurs.</p>\n<p id=textIntro>Par exemple, si je veux créer une variable qui contient le nombre 1, je peux écrire :</p>\n\n::: {#8e1354f2 .cell execution_count=1}\n``` {.python .cell-code}\na = 1\na\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n1\n```\n:::\n:::\n\n\n<p id=textIntro>Mais n'oubliez pas, il y a quand même des règles pour nommer les variables : pas de chiffres au début, pas de symboles bizarres, et ne pas mélanger des mots et des chiffres directement. </p>\n\n<p id=textIntro>De plus, il y a différentes manières de nommer une variable, voici des exemples :</p>\n* Le camelCase : Consiste à écrire chaque mot commençant par une majuscule sauf le premier et sans espaces\n\n* Le snake_case : Consiste à écrire chaque mot séparé par un underscore\n\n* Le PascalCase : Consiste à écrire chaque mot commençant par une majuscule et sans espaces\n\n::: {#62cf1ca7 .cell execution_count=2}\n``` {.python .cell-code}\nmaVariableExemple = 1       # Ceci est une variable écrite en camelCase\n\nma_variable_exemple = 1     # Ceci est une variable écrite en snake_case\n\nMaVariableExemple = 1       # Ceci est une variable écrite en PascalCase\n```\n:::\n\n\n<p id=textIntro>Il y a également plusieurs moyens de donner une valeur à une variable, voici les exemples les plus communs : </p>\n\n::: {#5ea38d8b .cell execution_count=3}\n``` {.python .cell-code}\n# Voici l'affectation simple\nmaVariable = 5    \n\n# Voici l'affectation par décomposition\nmaVar1, maVar2, maVar3 = \"valeur 1\", \"valeur 2\", \"valeur 3\"\nprint(maVar1, maVar2, maVar3)\n\n# Voici l'affectation de la même valeur à plusieurs variables\nmaVar1 = maVar2 = maVar3 = 20   \nprint(maVar1, maVar2, maVar3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nvaleur 1 valeur 2 valeur 3\n20 20 20\n```\n:::\n:::\n\n\n### Les types de variables\n\n<p id=textIntro>Il y a plusieurs types de variables en Python. Les types de variables en Python sont des catégories qui définissent le type de données qu'une variable peut contenir. En Python, nous rencontrons principalement trois types de variables :</p>\n\n* Les variables **numériques** : les variables numériques sont des variables qui peuvent contenir des **nombres**. On peut en trouver de différents types : **entiers(int)**, **décimaux(float)** et même **complexes(complex)** (1, 2.5, 4+2j)\n\n* Les variables de **chaîne de caractères** : Les chaînes de caractères, plus communément **appelées \"string\"** sont des variables qui peuvent contenir du **texte**. Comme \"Bonjour\" ou même des paragraphes entiers ! La spécificité des string c'est qu'elles peuvent être délimitées par des **guillemets simples** (' '), **doubles** (\" \") ou **triples** (''' '''). La particularité des guillemets triples c'est qu'elles peuvent contenir des **sauts de ligne**.\n\n* Les variables **booléennes** : Les variables booléennes sont des variables qui peuvent contenir des valeurs booléennes donc soit **vraie** (True) soit **fausse** (False). Elles sont utilisées\npour représenter des conditions ou des états logiques.\n\n::: {#6cdb470a .cell execution_count=4}\n``` {.python .cell-code}\nnomSimple = 'Ményssa'\nnomDouble = \"Johann\"\nnomTriple = '''Fré\ndé\nric'''\nage = 22\ntaille = 1.82\nestVrai = True\nestFaux = False\n\nprint(\"La variable nomSimple est de type: \", type(nomSimple))\nprint(\"La variable age est de type: \", type(age))\nprint(\"La variable taille est de type: \", type(taille))\nprint(\"La variable estVrai est de type: \",type(estVrai))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLa variable nomSimple est de type:  <class 'str'>\nLa variable age est de type:  <class 'int'>\nLa variable taille est de type:  <class 'float'>\nLa variable estVrai est de type:  <class 'bool'>\n```\n:::\n:::\n\n\n### Conversion de types\n<p id=textIntro>Il est possible de convertir un type de variable en un autre. Il existe des fonctions appelées <i><strong>cast ou casting</i></strong>. Voici quelques exemples :</p>\n\n::: {#dab1d48e .cell execution_count=5}\n``` {.python .cell-code}\n# Fonctions utilisées : int(), str(), bool(), float()\n# Conversion en entier\n## Depuis une chaine de caractères\nchaine = \"200\"\nchaineEnEntier = int(chaine) # On convertit la chaine en nombre\n\n## Depuis un booléen\nboolEnEntier= int(estVrai) # On convertit le booléen en nombre\n\n## Flottant en nombre\nfloatEnEntier = int(taille) # On convertit le flottant en nombre, il est troncaturé mais pas arrondi\n\n# Conversion en Chaine de Caractères\n## Depuis un entier ou un flottant\nentierEnChaine = str(chaineEnEntier) # On convertit le nombre en chaine\n\n## Depuis un booléen\nboolEnChaine = str(estVrai) # Convertit False en \"False\" et True en \"True\"\n\n# Conversion en booléen\n## Depuis une chaine de caractères\nchaineEnBool = bool(chaine) # Convertit une chaine non-vide en True et une chaine vide en False\n\n## Depuis un nombre\nnombreEnBool = bool(chaineEnEntier) # Convertit 0 en False et tout autre nombre en True\n\n# Conversion en flottant\n## Depuis une chaine de caractères\nchaineEnFlottant = float(chaine) # Convertit une chaine de caractères en flottant\n\n## Depuis un entier\nentierEnFlottant = float(chaineEnEntier) # Convertit 200 en 200.0\n\n## Depuis un booléen\nboolEnFlottant = float(estVrai) # Convertit True en 1.0 et False en 0.0\n```\n:::\n\n\n### Opérations Arithmétiques\n\n",
    "supporting": [
      "index_files\\figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}