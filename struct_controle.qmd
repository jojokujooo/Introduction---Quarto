---
title: Structures de contrôle
---
### Les opérateurs
#### Les opérateurs de comparaison

<p id=textIntro>Les opérateurs Python sont <strong>essentiels</strong> pour effectuer des opérations sur les variables et les valeurs. Parmi eux, les opérateurs de comparaison sont particulièrement utiles, permettant de comparer des valeurs et des variables selon différentes conditions telles que <strong>égal à (==)</strong>, <strong>différent de (!=)</strong>, <strong>supérieur à (>)</strong>, <strong>inférieur à (<)</strong>, <strong>supérieur ou égal à (>=)</strong>, et <strong>inférieur ou égal à (<=)</strong>. Ces opérateurs sont fondamentaux pour la logique conditionnelle et les structures de contrôle dans les programmes Python. </p>
<p id=textIntro>Ces opérateurs renvoient soit <strong>Vrai (True)</strong> soit <strong>Faux (False)</strong> selon le résultat de la comparaison.</p>
| **Opérateur** | **Description** |
| --- | --- |
| **==** | **égal à** |
| **!=** | **différent de** |
| **>** | **supérieur à** |
| **<** | **inférieur à** |
| **>=** | **supérieur ou égal à** |
| **<=** | **inférieur ou égal à** |


#### Les opérateurs logiques

<p id=textIntro>Les opérateurs logiques <strong>et (and)</strong>, <strong>ou (or)</strong> et <strong>non (not)</strong> sont également très utiles pour combiner des conditions notamment avec des opérateurs de comparaison.</p>

| **Opérateur** | **Description** |
| --- | --- |
| **and** | Retourne `True` si les deux opérandes sont vrais, sinon `False`. |
| **or** | Retourne `True` si au moins un des opérandes est vrai, sinon `False`. |
| **not** | Retourne `True` si l'opérande est faux, sinon `False`. |


#### Les opérateurs d'appartenance

<p id=textIntro>Les opérateurs d'appartenance <strong>in</strong> et <strong>not in</strong> sont également très utiles pour vérifier si une valeur ou une variable est incluse dans une autre valeur ou variable</p>
| **Opérateur** | **Description** |
| --- | --- |
| **in** | Retourne `True` si l'élément est présent dans la séquence, sinon `False`. |
| **not in** | Retourne `True` si l'élément n'est pas présent dans la séquence, sinon `False`. |

### Les conditions
<p id=textIntro>
Les conditions en Python permettent d'exécuter certaines parties du code uniquement <strong>si une condition spécifique est remplie</strong>. Elles sont souvent utilisées pour <strong>prendre des décisions</strong> dans le code, en fonction de l'état ou de la valeur des variables.

En Python, les conditions sont généralement exprimées à l'aide de l'instruction <strong>if (Si)</strong>, qui est suivie d'une expression **conditionnelle**. Voici un exemple simple :</p>

```{python}
a,b = 5,3 # On initialise les variables a et b à 5 et 3
if a > b: # Si a est supérieur à b alors on affiche le message
    print("C'est vrai !")
```

<p id=textIntro>Dans cet exemple, la condition **a > b** est évaluée. Si elle est **vraie**, le code suivant est exécuté. Si elle est fausse, le code sera ignoré et le programme continuera à la **prochaine instruction**.</p>

<p id=textIntro>Il est possible de combiner **plusieurs conditions** en utilisant les opérateurs logiques et de comparaison</p>

```{python}
if a < b or b < 4: # Si a est inférieur à b ou b est inférieur à 4 alors on affiche le message
    print("C'est vrai !")
```

<p id=textIntro>En plus de l'instruction **if (Si)**, Python propose également d'autres instructions de contrôle de flux, telles que **else (Sinon)** et **elif (abréviation de "else if" pour Sinon Si)**, pour gérer différents scénarios. Voici un exemple utilisant else.</p>

```{python}
x = 10

if x > 10: # Si x est supérieur à 10 alors on affiche le message suivant
    print("x est supérieur à 10")
else: # Sinon on affiche le message suivant
    print("x est inférieur à 10")
```

<p id=textIntro>Voici un nouvel exemple qui utilise à la fois **if, else et elif**</p>

```{python}
a,b,c,d = 20,18,7,10

if a > b and c > d: # Si a est supérieur à b et c est supérieur à d alors on affiche le message
    print("a est supérieur à b et c est supérier à d")
elif a > b and c < d: # Sinon si a est supérieur à b et c est inférieur à d alors on affiche le message
    print("a est supérieur à b et c est inférieur à d")
else: # Sinon on affiche le message
    print("a est inférieur à b et c est inférieur à d")

```

<p id=textIntro>Combiner ces conditions permet de créer des <strong>conditions complexes</strong> et de gérer des cas plus difficiles.</p>

### Les boucles
#### La boucle **for**

<p id=textIntro>La boucle **for** en Python est largement utilisée pour **parcourir des structures de données** telles que les **listes**, les **tuples**, les **chaînes de caractères** ou les **dictionnaires**. Elle commence par examiner le premier élément de la séquence spécifiée, exécute des actions dans son corps, puis passe à l'élément suivant jusqu'à ce que la séquence soit **entièrement parcourue**. La syntaxe de la boucle for comprend le mot-clé "**for**", suivi d'une variable temporaire pour contenir chaque élément, du mot-clé "**in**", de la séquence à parcourir, et enfin de deux points "**:**". À l'intérieur du corps de la boucle, vous pouvez appliquer des opérations sur la variable temporaire pour effectuer diverses actions. Il est également possible d'**imbriquer des boucles for** pour parcourir des structures de données imbriquées. Lors de l'itération sur un dictionnaire, vous pouvez utiliser la méthode **items()** pour boucler à la fois sur les clés et les valeurs associées. Voici plusieurs exemples de boucle for :</p>

* Parcourir une chaine de caractères
```{python}
chaine = "Ményssa"

for lettre in chaine: # On parcourt la chaîne de caractère
    print(lettre) # On affiche chaque lettre

```

* Parcourir une liste
```{python}
maListe = ["Janvier", "Février", "Mars", "Avril"]

for mois in maListe: # On parcourt la liste
    print(mois) # On affiche chaque élément de la liste

```

<p id=textIntro>Mais les boucles ne sont pas simplement faites pour afficher le contenu d'une séquence elles peuvent être combinées à une condition :</p>

```{python}
nombres = [1, 5, 4, 9, 36, 43]

for nombre in nombres:
    if nombre % 2 == 0: # Si le nombre est pair
        print(f"{nombre} est pair")
    else:
        print(f"{nombre} est impair")
```

#### La boucle **while**
<p id=textIntro>La boucle **while** permet de répéter une partie de code **tant qu'**une condition est remplie. Comme son nom l'indique la boucle while ne s'arrête pas sauf si la condition est remplie, il faut donc être **attentif** et ne pas faire de boucle **while** infinie !! Nous allons voir un exemple :</p>

```{python}
nombre = 0
while nombre <= 10: # Tant que nombre est inférieur à 10
    print(nombre)
    nombre+=1

```

<p id=textIntro>Certaines instructions permettent de modifier le comportement de l'exécution du code au sein d'une boucle
<ul>
    <li>
        <p id=textIntro>**break** : L'instruction **break** est utilisée pour sortir **prématurément** d'une boucle, interrompant son exécution **même si la condition de la boucle while ou la fin de la séquence for n'a pas été atteinte**. Cela est souvent utile lorsque vous avez atteint une condition spécifique et souhaitez arrêter la boucle.</p>
    </li>
    <li>
    <p id=textIntro>**continue** : L'instruction **continue** est utilisée pour **passer à l'itération suivante** d'une boucle **sans exécuter le reste du code** dans le bloc de la boucle pour l'itération actuelle. Elle est généralement utilisée pour **ignorer certaines itérations basées sur une condition particulière**, tout en continuant à itérer sur le reste des éléments.
    </p>
    </li>
</ul>
Voici quelques exemples :
</p>

```{python}
# Boucle while avec break

i = 0
while i <= 5:
    print(i)
    if i == 3:
        print("Sortie de la boucle car i = 3")
        break  # Sort de la boucle si i est égal à 3
    i += 1

```

```{python}
# Boucle while avec continue
i = 0
while i < 10:
    i += 1
    if i == 3:
        continue  # Passe à l'itération suivante si i est égal à 3
    print(i)

```

<p id=textIntro>C'en est fini avec les structures de contrôle ! Prêt pour de nouveaux défis ?<a href=types_donnees.qmd>Cliquez-ici</a> pour passer à la suite.</p>