---
title: Les Fonctions
---

### Les fonctions : Définition et rappels

#### Qu'est ce qu'une fonction ?

<p id=textIntro>Une **fonction** en programmation est essentiellement une série d'instructions regroupées sous un nom spécifique. Elle agit comme une petite "machine" qui peut recevoir des **entrées**, appelées **paramètres**, traiter ces données selon un ensemble d'instructions définies à l'intérieur de la fonction, et éventuellement produire un **résultat**, appelé **valeur de retour**.</p>

#### Une fonction en Python
<p id=textIntro>Une fonction est définie en utilisant le mot-clé `def`, suivi du nom de la fonction, des parenthèses () contenant des paramètres (si nécessaires), et
un bloc d'instructions indenté.</p>

```{python}
def nom_de_la_fonction(parametres):
    # instructions
    return valeur_de_retour
```

#### L'importance des fonctions
<p id=textIntro>Les fonctions jouent un rôle crucial dans la réduction de la redondance du code. Plutôt que de répéter le même code à plusieurs endroits, les fonctions nous permettent de regrouper ce code et de l'appeler selon les besoins. Cette approche rend le code plus concis, plus clair et plus simple à maintenir.</p>

#### Pourquoi utiliser les fonctions ?
<p id=textIntro>Les fonctions offrent plusieurs avantages essentiels : 
<ul>
<li><p id=textIntro>**Simplification du code** : En encapsulant des tâches complexes dans des fonctions, on simplifie le code principal, le rendant plus **lisible** et plus **compréhensible**.</p></li>
<li><p id=textIntro>**Réutilisabilité** : Une fois une fonction définie, elle peut être utilisée **autant de fois que nécessaire** sans avoir à réécrire le même code, ce qui **économise du temps** et **réduit les risques d'erreurs.**</p></li>
<li><p id=textIntro>**Meilleure organisation du code** : Les fonctions contribuent à **structurer le code** en unités logiques. Chaque fonction a un objectif spécifique, ce qui facilite la compréhension du programme dans son ensemble. De plus, cela **simplifie le débogage** et le **test de parties spécifiques** du code.</p></li>
</ul>
</p>

```{python}
def maFonction():
    print("C'est MA fonction")
```

<p id=textIntro>Dans cet exemple `maFonction` est le nom de notre fonction, elle ne prend pas de paramètre. Les instructions que la fonction exécute permettent simplement d'afficher un message **seulement quand on appelle la fonction**.</p>

#### Appel d'une fonction
<p id=textIntro>Une fois la fonction définie, celle-ci peut être appelée en utilisant son nom suivi de parenthèses. Quand elle est appelée, les instructions qui la composent sont executés :</p>

```{python}
maFonction()
```

#### Paramètres et Arguments
<p id=textIntro>Les fonctions peuvent être plus flexibles lorsqu'elles prennent des paramètres. Les paramètres agissent comme des variables dans la définition de la
fonction.</p>

```{python}
def maFonctionAvecParam(param1, param2):
    print(param1)
    print(param2)

def bonjour(prenom):
    print(f"Bonjour {prenom}")

bonjour("Pierre")
```

<p id=textIntro>Dans l'exemple ci-dessus `prenom` est le **paramètre** de notre fonction `bonjour`. **Quand la fonction est appelée**, elle prend un **argument**, qui est une valeur qui est passée à la fonction lors de son appel. Ici, notre **argument** est `"Pierre"`.
Dans cet appel, `"Pierre"` est un argument qui est passé à la fonction `bonjour` . La fonction utilisera la valeur de cet argument lors de son exécution.

Voici quelques exemples :
</p>

```{python}
# Définition de la fonction pour afficher un message
def affiche_message(message):
    print(f"Message reçu : {message}")

# Appel de la fonction avec différents messages
affiche_message("Bonjour, comment ça va ?")
affiche_message("Python, c'est génial !")

# Définition de la fonction pour additionner deux nombres
def additionner(a, b):
    somme = a + b
    print(f"La somme de {a} et {b} est {somme}")

# Appel de la fonction avec différents arguments
additionner(a=5, b=3)
additionner(5, 3)
additionner(b=10, a=67)

# Définition de la fonction pour diviser deux nombres
def division(a, b):
    quotient = a / b
    print(f"Le quotient de {a} et {b} est {quotient}")

# Appel de la fonction avec différents arguments
division(a=5, b=3)
division(b=3, a=5)
division(3, 5)
division(5, 3)

# Définition de la fonction pour calculer la puissance d'un nombre
def puissance(base, exposant):
    resultat = base ** exposant
    print(f"{base} élevé à la puissance {exposant} est égal à {resultat}")

# Appel de la fonction avec différents arguments
puissance(exposant=2, base=3)

# Import de la bibliothèque math pour utiliser pi
import math

# Définition de la fonction pour calculer le périmètre d'un cercle
def perimetre_cercle(rayon):
    perimetre = 2 * math.pi * rayon
    print(f"Le périmètre d'un cercle de rayon {rayon} est {perimetre:.2f}")

# Appel de la fonction avec différents rayons
perimetre_cercle(5)

```

#### Différence entre Paramètres et Arguments 

<ul>
<li><p id=textIntro>**Paramètres** : Ce sont les noms des variables définis dans la déclaration de la fonction. Ces **paramètres** servent de **réceptacles** pour les valeurs qui seront passées à la fonction **lors de son appel**. Ils définissent les données que la fonction **s'attend à recevoir** pour effectuer ses opérations.</p></li>

<li><p id=textIntro>**Arguments** : Ce sont les **valeurs réelles** fournies à la fonction **lors de son appel**. Ces valeurs correspondent aux paramètres définis dans la fonction. Lorsque la fonction est appelée, les **arguments sont assignés aux paramètres** correspondants selon leur position ou leur nom, et **la fonction les utilise** pour effectuer ses calculs ou exécuter ses instructions.</p></li>
</ul>

#### Valeurs Par Défaut des Paramètres
<p id=textIntro>Les paramètres présents dans les fonctions peuvent avoir une **valeur par défaut**. Cela signifie que la fonction peut être appelée **sans** fournir d'arguments ou si les arguments passés **ne correspondent pas** aux valeurs attendues.</p>

```{python}
def uneFonctionQuelconque(parametre_1, 
                          parametre_2 = 'kebab'): # On définit un paramètre par défaut
    print(f"Mon premier paramètre est : {parametre_1} \
         et mon deuxième paramètre est : {parametre_2}")

uneFonctionQuelconque('pizza') # On appelle la fonction avec un argument

```

<p id=textIntro>Dans cet exemple la fonction `uneFonctionQuelconque()` est appelée avec seulement un argument donc la fonction utilise le **paramètre par défaut** `kebab`</p>

<p id=textIntro>Cela permet donc d'écrire des fonctions plus flexible, et d'éviter des erreurs quand des arguments ne sont pas essentiels. Voici un autre exemple :</p>

```{python}
uneFonctionQuelconque('Un', 'kebab avec Ményssa')
```

### Les types de fonctions
<p id=textIntro>En Python il y a deux types de fonctions, celles qui renvoient une valeur et celles qui n'en retournent pas :</p>

<ul>
<li><p id=textIntro>**Fonctions Avec Valeur de Retour** : Une fonction avec retour (`return`) renvoie ladite valeur là où la fonction est appelée. Il faut donc penser à assigner ce retour à une variable.<p></li>

<li><p id=textIntro>**Fonctions Sans Valeur de Retour** : Une fonction qui ne revoie rien sert à effectuer des instructions comme afficher des messages.</p></li>
</ul>

```{python}
def uneAutreFonction():
    return 'Une valeur de retour' # On retourne une valeur

variable_resultat = uneAutreFonction()
print(variable_resultat) # On affiche la valeur retournée
```

<p id=textIntro>Il faut aussi savoir que des instructions peuvent être exécutées **dans le retour** d'une fonction. Une fonction avec une valeur de retour peut aussi afficher des messages sans imputer la valeur de retour. Nous allons voir ensemble des exemples :</p>

```{python}
def multiplier_par_deux(a, b=2):
    print(f"Vous avez multiplié {a} par {b}") # On affiche un message
    return a * b # On retourne la valeur de a * b

resultat = multiplier_par_deux(3) # On appelle la fonction avec un argument
print(resultat)

def celius_en_farenheit(temperature_celsius):
    return (temperature_celsius * 9/5) + 32

temperature_farenheit = celius_en_farenheit(10)
print(f"Votre température en Farenheit est {temperature_farenheit}°F")

def valeur_minimum(a,b):
    return min(a,b)

resultat = valeur_minimum(4, 50)
print(f'La valeur minimum est : {resultat}')

```

### La portée des variables
<p id=textIntro>Les variables déclarées dans une fonction sont appelées des **variables locales** elles sont accessibles **seulement à l'intérieur** d'une fonction. Tandis qu'une variable déclarée en dehors d'une fonction ou autre est appelée **variable globale**. Un variable globale est utilisée pour partager des donner à plusieurs partie du programme.</p>

```{python}
p = 'Miam le kebab' # Ceci est une variable globale

def une_fonction():
    p = 'Miam le poulet' # Ceci est une variable locale
    print(p)

une_fonction()

print(p)
```

<p id=textIntro>Cet exemple illustre ce principe, ci-dessus nous pouvons voir que nous avons deux variables `p`. La première est une variable **globale** et la seconde est une variable **locale**. La variable locale est utilisée dans la fonction et la variable globale est utilisée en dehors de la fonction. Il faut tout de même **faire attention** en utilisant les variables globales pour ne pas créer d'erreurs de conception.</p>

<p id=textIntro>Il est possible de **modifier** une variable **globale** à l'intérieur d'une fonction en utilisant le mot-clé `global`.</p>

```{python}

a = 35

def fonction_de_fou():
    global a # On modifie la variable globale
    a = 'Kebab'

print(a) # On affiche la variable globale avant modification
fonction_de_fou()
print(a) # On affiche la variable globale après modification

```

### Nombre d'arguments variable
<p id=textIntro>Il est possible de définir une fonction qui prend un nombre d'arguments **variable**. Pour cela il faut utiliser le mot-clé `*` devant un paramètre de type **liste** ou **tuple** quand on définit la fonction. A noter que pour les paramètres de type **dictionnaire** il faut utiliser `**`, ils sont pratiques car ils permettent de définir les clés d'arguments.</p>

```{python}
def somme(*nombres):
    somme = 0
    for nombre in nombres:
        somme += nombre

    return somme

resultat = somme(10, 20, 30, 40)
print(resultat)


def fonction_avec_dictionnaire(**dict):
    print(f"Mon prénom est {dict['prenom']}, mon repas préféré est le {dict['repas']}")

fonction_avec_dictionnaire(prenom = 'Ményssa', repas = 'Kebab')

```

<p id=textIntro>On peut aussi accéder à ses arguments avec l'index du paramètre. **Attention**, il faut être sûrs de passer **assez d'arguments** à la fonction sinon il y aura une erreur ! Dans le cas inverse, les arguments "en trop" seront ignorés.</p>

```{python}
def les_parametres(*parametres):
    print(f"Message : {parametres[2]}")
    return parametres[0] + parametres[1]

les_parametres(1,2, 'Je suis le troisième argument')

```

### Les fonctions anonymes (Lambda Functions)

<p id=textIntro>Le mot-clé `lambda` sert à définir des **fonctions anonymes**, aussi appelées **fonctions lambda**.
Les fonctions lambda ne sont pas définies avec un nom mais peuvent être utilisées dans des expressions ou des fonctions. Elles sont utilisées quand des fonctions simples doivent utilisée pour une tâche spécifique. Par exemple trier une liste de nombre ou appliquer une formule à toute une liste.</p>

```{python}
celsius_en_farenheit = lambda x: (x*9/5)+32

celsius_en_farenheit(10)

liste_nombres = range(1,10)

# Eleve les nombres au carré
nombres_carrés = [(lambda x: x*x)(nombre) for nombre in liste_nombres]
print(nombres_carrés)

nombres_pairs = list(filter(lambda x: x%2==0, liste_nombres))
print(nombres_pairs)

nombres_carres_map = map(lambda n:n*n, liste_nombres)
print(list(nombres_carres_map))
```

<p id=textIntro>Comme vu ci-dessus, les fonctions **map** et **filter** peuvent être utilisée avec des fonctions lambdas. `map`permet d'appliquer une fonction à une variable **itérable** (liste, tuple, dictionnaire) et `filter` permet, comme son nom l'indique, de filtrer les éléments d'une liste selon une condition émise dans une fonction lambda.</p>

### Les fonctions et la récursivité
<p id=textIntro>La **récursivité** est un principe essentiel en programmation. Cela consiste à définir une fonction qui s'appelle elle-même. Cela peut paraître étrange mais c'est une technique puissante pour résoudre certains problèmes, généralement quand on peut les décomposer en sous-problèmes. Voici des exemples : </p>

```{python}
import time
def compte_a_rebours(temps):
    if temps <= 0:
        print("C'est l'heure du kebab !")
    else:
        print(temps)
        time.sleep(1)
        compte_a_rebours(temps-1)

compte_a_rebours(5)
```

<p id=textIntro>Dans cet exemple, la fonction `compte_a_rebours` prend un nombre en paramètre. Si il est **inférieur ou égal** à 0 on affiche le message de fin du compte. Sinon on affiche le temps restant, on attend 1 seconde avec la fonction `time.sleep` et on appelle la fonction `compte_a_rebours` avec le temps en paramètre moins 1.</p>

<p id=textIntro> **ATTENTION** Il faut utiliser la récursivité avec précaution car elle peut entraîner des fameuses erreurs de débordement de pile (Stack Overflow) qui ont donné leur nom au site.</p>

### C'EST LA FIN
<p id=textIntro>C'est la fin de mon cours sur les Fondamentaux de Python. J'espère que vous avez pu apprendre quelque chose ou rafraîchir des connaissances ! Vous pouvez maintenant aller vous entraîner dans la rubrique `Exercices` de mon site ou en cliquant <a href="">ici</a> ! Pour toutes questions demandez à <a href="https://www.linkedin.com/in/johanncazenave/">ChatGPT</a>. 