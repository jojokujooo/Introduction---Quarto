---
title: Les Fonctions
---

### Les fonctions : Définition et rappels

#### Qu'est ce qu'une fonction ?

<p id=textIntro>Une **fonction** en programmation est essentiellement une série d'instructions regroupées sous un nom spécifique. Elle agit comme une petite "machine" qui peut recevoir des **entrées**, appelées **paramètres**, traiter ces données selon un ensemble d'instructions définies à l'intérieur de la fonction, et éventuellement produire un **résultat**, appelé **valeur de retour**.</p>

#### Une fonction en Python
<p id=textIntro>Une fonction est définie en utilisant le mot-clé `def`, suivi du nom de la fonction, des parenthèses () contenant des paramètres (si nécessaires), et
un bloc d'instructions indenté.</p>

```{python}
def nom_de_la_fonction(parametres):
    # instructions
    return valeur_de_retour
```

#### L'importance des fonctions
<p id=textIntro>Les fonctions jouent un rôle crucial dans la réduction de la redondance du code. Plutôt que de répéter le même code à plusieurs endroits, les fonctions nous permettent de regrouper ce code et de l'appeler selon les besoins. Cette approche rend le code plus concis, plus clair et plus simple à maintenir.</p>

#### Pourquoi utiliser les fonctions ?
<p id=textIntro>Les fonctions offrent plusieurs avantages essentiels : 
<ul>
<li><p id=textIntro>**Simplification du code** : En encapsulant des tâches complexes dans des fonctions, on simplifie le code principal, le rendant plus **lisible** et plus **compréhensible**.</p></li>
<li><p id=textIntro>**Réutilisabilité** : Une fois une fonction définie, elle peut être utilisée **autant de fois que nécessaire** sans avoir à réécrire le même code, ce qui **économise du temps** et **réduit les risques d'erreurs.**</p></li>
<li><p id=textIntro>**Meilleure organisation du code** : Les fonctions contribuent à **structurer le code** en unités logiques. Chaque fonction a un objectif spécifique, ce qui facilite la compréhension du programme dans son ensemble. De plus, cela **simplifie le débogage** et le **test de parties spécifiques** du code.</p></li>
</ul>
</p>

```{python}
def maFonction():
    print("C'est MA fonction")
```

<p id=textIntro>Dans cet exemple `maFonction` est le nom de notre fonction, elle ne prend pas de paramètre. Les instructions que la fonction exécute permettent simplement d'afficher un message **seulement quand on appelle la fonction**.</p>

#### Appel d'une fonction
<p id=textIntro>Une fois la fonction définie, celle-ci peut être appelée en utilisant son nom suivi de parenthèses. Quand elle est appelée, les instructions qui la composent sont executés :</p>

```{python}
maFonction()
```

#### Paramètres et Arguments
<p id=textIntro>Les fonctions peuvent être plus flexibles lorsqu'elles prennent des paramètres. Les paramètres agissent comme des variables dans la définition de la
fonction.</p>

```{python}
def maFonctionAvecParam(param1, param2):
    print(param1)
    print(param2)

def bonjour(prenom):
    print(f"Bonjour {prenom}")

bonjour("Pierre")
```

<p id=textIntro>Dans l'exemple ci-dessus `prenom` est le **paramètre** de notre fonction `bonjour`. **Quand la fonction est appelée**, elle prend un **argument**, qui est une valeur qui est passée à la fonction lors de son appel. Ici, notre **argument** est `"Pierre"`.
Dans cet appel, `"Pierre"` est un argument qui est passé à la fonction `bonjour` . La fonction utilisera la valeur de cet argument lors de son exécution.

Voici quelques exemples :
</p>

```{python}
# Définition de la fonction pour afficher un message
def affiche_message(message):
    print(f"Message reçu : {message}")

# Appel de la fonction avec différents messages
affiche_message("Bonjour, comment ça va ?")
affiche_message("Python, c'est génial !")

# Définition de la fonction pour additionner deux nombres
def additionner(a, b):
    somme = a + b
    print(f"La somme de {a} et {b} est {somme}")

# Appel de la fonction avec différents arguments
additionner(a=5, b=3)
additionner(5, 3)
additionner(b=10, a=67)

# Définition de la fonction pour diviser deux nombres
def division(a, b):
    quotient = a / b
    print(f"Le quotient de {a} et {b} est {quotient}")

# Appel de la fonction avec différents arguments
division(a=5, b=3)
division(b=3, a=5)
division(3, 5)
division(5, 3)

# Définition de la fonction pour calculer la puissance d'un nombre
def puissance(base, exposant):
    resultat = base ** exposant
    print(f"{base} élevé à la puissance {exposant} est égal à {resultat}")

# Appel de la fonction avec différents arguments
puissance(exposant=2, base=3)

# Import de la bibliothèque math pour utiliser pi
import math

# Définition de la fonction pour calculer le périmètre d'un cercle
def perimetre_cercle(rayon):
    perimetre = 2 * math.pi * rayon
    print(f"Le périmètre d'un cercle de rayon {rayon} est {perimetre:.2f}")

# Appel de la fonction avec différents rayons
perimetre_cercle(5)

```

#### Différence entre Paramètres et Arguments 

<ul>
<li>**Paramètres** : Ce sont les noms des variables définis dans la déclaration de la fonction. Ces **paramètres** servent de **réceptacles** pour les valeurs qui seront passées à la fonction **lors de son appel**. Ils définissent les données que la fonction **s'attend à recevoir** pour effectuer ses opérations.</li>

<li>**Arguments** : Ce sont les **valeurs réelles** fournies à la fonction **lors de son appel**. Ces valeurs correspondent aux paramètres définis dans la fonction. Lorsque la fonction est appelée, les **arguments sont assignés aux paramètres** correspondants selon leur position ou leur nom, et **la fonction les utilise** pour effectuer ses calculs ou exécuter ses instructions.</li>
</ul>